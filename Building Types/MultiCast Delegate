//Delegates provide a way to define and execute callbacks. Their flexibility allows you to define the exact signature of the callback, and that information becomes part of the delegate type itself. Delegates are type-safe, object-oriented and secure.
using System;
using System.Collections.Generic;
using Xunit;

namespace GreatBook.Tests
{
     public delegate string WriteLogDelegate(string logMessage);
     
         
     
    public class TypeTests
    {
    //MultiCastDelegates
       [Fact]
      
       public void WriteLogDelegateCanPointToMethod(){
        WriteLogDelegate log= ReturnMessage;
        log+=ReturnMessage;
        log+=IncrementCount;
        var result=log("Hello");
        Assert.Equal(3,Count);
        
       }
        String  IncrementCount(string message)
       {
           count++;
           return message.Tolower();
       }
       String  ReturnMessage(string message)
       {
           count++;
           return message;
       }
        [Fact]
        public void Test(){
            var x= GetInt();
            SetInt(x);
            Assert.Equal(3,x);
        }
        private void SetInt(int x)
        {
            
            x=42;
        }
        private int GetInt()
        {
           return 3;
        }
        [Fact]
         public void CsharpCanPassByRef(){
            var book1=GetBook("Book 1");
            GetBookSetName(out book1,"New Name");
            Assert.Equal("New Name",book1.Name);
        }
        [Fact]

        private void GetBookSetName(out Book book,string name)
        {
            book=new Book(name);
        }


        [Fact]
        public void CsharpIsPassByValue(){
            var book1=GetBook("Book 1");
            GetBookSetName(book1,"New Name");
            Assert.Equal("Book 1",book1.Name);
        }
        private void GetBookSetName(Book book,string name)
        {
            book=new Book(name);
        }

        [Fact]
        public void CanSetNameFromReference(){
            var book1=GetBook("Book 1");
            SetName(book1,"New Name");
            Assert.Equal("New Name",book1.Name);
            


        }
        private void SetName(Book book,String name)
        {
            book.Name=name;
        }
        [Fact]
        public void StringBehaveLikeValueType()
        {
            string name ="scott";
           var upper=Makeuppercase(name);
           Assert.Equal("scott",name);
           Assert.Equal("Scott",Upper);
        }
        private string Makeuppercase(string parameter){
            return parameter.ToUpper();
        }
        [Fact]
        public void GetBookReturnsDifferentObjects(){
            var book1=GetBook("Book1");
            var book2=GetBook("Book2");
            Assert.Equal("Book1",book1.name);
            Assert.Equal("Book2",book2.name);
            Assert.NotSame(book1,book2);


        }
         public void TwoVarsCanReferenceSameObject(){
            var book1=GetBook("Book1");
            var book2=book1;
            Assert.Same(book1,book2);
            Assert.True(Object.ReferenceEquals(book1,book2));


        }
        Book GetBook(String name)
        {
           return new Book(name);
        }
}
}
