//Here We can see how can we overloading of methods is done basically i created a method in book.cs file and passing it in program.cs 
//book.cs
//---------------------
using System;
using System.Collections.Generic;
namespace GBook
{
    public class Book{
        public Book(string name){
            grades=new List<double>();
            this.Name=name;
        }
        //OVERLOADING THE METHOD ADDGRADE
        public String AddGrade(char letter, char x){
            return "";
        }
        public void AddGrade(char letter)
        {
           switch(letter)
           {
               case 'A':
                   AddGrade(90);
                   break;
               case 'B':
                   AddGrade(80);
                   break;
               case 'C':
                  AddGrade(70);
               default:
                  AddGrade(0);
                  break;


           }
        }

         public void AddGrade(double grade){
             
            if (grade<=100 && grade>=0)
            {
            
              grades.Add(item: grade);  
                }
                else
                {
                    throw new ArgumentException($"Invalid{nameof(grade)}");
                }
            }
            
        

        public Statistics GetStatistics()
        {
        
            var result = new Statistics();
            result.Average=0.0;
            result.highgrade = double.MinValue;
            result.lowgrade = double.MaxValue;
            for(var index=0;index<grades.Count;index+=1)
            {
                result.lowgrade = Math.Min(grades[index], result.lowgrade);
                result.highgrade = Math.Max(grades[index],result. highgrade);
                result.Average+= grades[index];
            }
           result.Average /= grades.Count;
           switch(result.Average)
           {
                  case var d when d>=90.0:
                  result.Letter='A';
                  break;
                  case var d when d>=80.0:
                  result.Letter='B';
                  break;
                  case var d when d>=70.0:
                  result.Letter='C';
                  break;
                  case var d when d>=60.0:
                  result.Letter='D';
                  break;
                  default:
                  result.Letter='F';
                  break;
           }
           return result;
        
}
        private  List<double> grades;
        public string Name
        {
          get {
              return name;
          }
          set{
              if(!String.IsNullOrEmpty(va1ue))
              {
              name= value;
              }
          }
        }
        private string name;
}
        }
 //program.cs
using System;
using System.Collections.Generic;

namespace GreatBook
{
    class Program
    {
        static void Main(string[] args)
        {
            var book = new Book("Sowmya grade book");
            
            while(true){
            Console.WriteLine("Enter a grade or 'q' to quit");
            var input=Console.ReadLine();
            if(input=="q")
            {
                break;
            }
            //PASSING THE VALUE HERE
            try{
            var grade=double.Parse(input);
            book.AddGrade(grade);
            book.AddGrade('A');
            }
            catch(ArgumentException ex){
                Console.WriteLine(ex.Message);
            
            }
            catch(FormatException ex)
            {
                Console.WriteLine(ex.Message);
            
            }
            finally{
                Console.WriteLine("**");
            }

            
            }

            var stats=book.GetStatistics();
            book.Name="";            
            Console.WriteLine($"For the book named {book.Name}");
            Console.WriteLine($"The lowest grade is{stats.lowgrade}");
            Console.WriteLine($"The high grade is{stats.highgrade}");
            Console.WriteLine(value: $"The average grade is{stats.Average:N1}");
            Console.WriteLine!($"The Letter Grade is {stats.Letter}");
            
            
            

       
    }
}
} 
